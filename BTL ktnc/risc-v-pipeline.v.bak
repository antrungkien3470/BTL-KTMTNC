module RISC_V_Pipelined (
    input clk,
    input reset
);
    // Program Counter
    reg [31:0] pc;
    wire [31:0] pc_next;
    always @(posedge clk or posedge reset) begin
        if (reset)
            pc <= 0;
        else
            pc <= pc_next;
    end
    assign pc_next = pc + 4; // Tăng PC, không hỗ trợ nhảy

    // --- Giai đoạn Fetch (IF) ---
    wire [31:0] if_instruction;
    InstructionMemory instr_mem (
        .address(pc),
        .instruction(if_instruction)
    );

    // Thanh ghi IF/ID
    reg [31:0] if_id_pc, if_id_instruction;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            if_id_pc <= 0;
            if_id_instruction <= 0;
        end else begin
            if_id_pc <= pc;
            if_id_instruction <= if_instruction;
        end
    end

    // --- Giai đoạn Decode (ID) ---
    wire [4:0] rs1, rs2, rd;
    assign rs1 = if_id_instruction[19:15];
    assign rs2 = if_id_instruction[24:20];
    assign rd = if_id_instruction[11:7];

    wire [31:0] id_read_data1, id_read_data2;
    wire id_reg_write;
    wire id_alu_src;
    wire [1:0] id_alu_op;
    wire [31:0] id_imm_ext;

    RegisterFile reg_file (
        .clk(clk),
        .rs1(rs1),
        .rs2(rs2),
        .rd(mem_wb_rd), // Từ giai đoạn WB
        .write_data(mem_wb_write_data),
        .reg_write(mem_wb_reg_write),
        .read_data1(id_read_data1),
        .read_data2(id_read_data2)
    );

    ImmediateGenerator imm_gen (
        .instruction(if_id_instruction),
        .imm_ext(id_imm_ext)
    );

    ControlUnit control (
        .opcode(if_id_instruction[6:0]),
        .reg_write(id_reg_write),
        .alu_src(id_alu_src),
        .alu_op(id_alu_op)
    );

    // Thanh ghi ID/EX
    reg [31:0] id_ex_read_data1, id_ex_read_data2, id_ex_imm_ext;
    reg [4:0] id_ex_rd;
    reg id_ex_reg_write, id_ex_alu_src;
    reg [1:0] id_ex_alu_op;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            id_ex_read_data1 <= 0;
            id_ex_read_data2 <= 0;
            id_ex_imm_ext <= 0;
            id_ex_rd <= 0;
            id_ex_reg_write <= 0;
            id_ex_alu_src <= 0;
            id_ex_alu_op <= 0;
        end else begin
            id_ex_read_data1 <= id_read_data1;
            id_ex_read_data2 <= id_read_data2;
            id_ex_imm_ext <= id_imm_ext;
            id_ex_rd <= rd;
            id_ex_reg_write <= id_reg_write;
            id_ex_alu_src <= id_alu_src;
            id_ex_alu_op <= id_alu_op;
        end
    end

    // --- Giai đoạn Execute (EX) ---
    wire [31:0] ex_alu_result;
    ALU alu (
        .a(id_ex_read_data1),
        .b(id_ex_alu_src ? id_ex_imm_ext : id_ex_read_data2),
        .op(id_ex_alu_op),
        .result(ex_alu_result)
    );

    // Thanh ghi EX/MEM
    reg [31:0] ex_mem_alu_result;
    reg [4:0] ex_mem_rd;
    reg ex_mem_reg_write;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            ex_mem_alu_result <= 0;
            ex_mem_rd <= 0;
            ex_mem_reg_write <= 0;
        end else begin
            ex_mem_alu_result <= ex_alu_result;
            ex_mem_rd <= id_ex_rd;
            ex_mem_reg_write <= id_ex_reg_write;
        end
    end

    // --- Giai đoạn Memory (MEM) ---
    // Không dùng bộ nhớ dữ liệu, truyền thẳng kết quả
    wire [31:0] mem_write_data = ex_mem_alu_result;

    // Thanh ghi MEM/WB
    reg [31:0] mem_wb_write_data;
    reg [4:0] mem_wb_rd;
    reg mem_wb_reg_write;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            mem_wb_write_data <= 0;
            mem_wb_rd <= 0;
            mem_wb_reg_write <= 0;
        end else begin
            mem_wb_write_data <= mem_write_data;
            mem_wb_rd <= ex_mem_rd;
            mem_wb_reg_write <= ex_mem_reg_write;
        end
    end
endmodule